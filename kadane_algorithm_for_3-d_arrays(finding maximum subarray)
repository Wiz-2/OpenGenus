def Traversal(array,origin_x,origin_z,dimension_x,dimension_y,dimension_z):
	left=origin_x
	while(origin_z!=dimension_z):
		inwards=origin_z
		while(inwards!=dimension_z):
			left=origin_x
			while(left!=dimension_x):
				right=left
				moving_left=left
				while(right!=dimension_x):
					y_axis=0
					sum_in_row=0
					kadane_array=[]
					while(y_axis!=dimension_y):
						moving_inwards=origin_z
						while(moving_inwards!=inwards+1):
							moving_left=left
							
							while(moving_left!=right+1):
								sum_in_row+=array[moving_inwards][y_axis][moving_left]
								moving_left+=1
							moving_inwards+=1
						kadane_array.append(sum_in_row)
						sum_in_row=0
						y_axis+=1
					d=kadane(kadane_array,dimension_y,left,right,origin_z,inwards)#origin_z,inwards) #here, 0 will be the official z1 coordinate. our array will consist of array[0:inwards][y_axis_from_kadane's_algorithm][left:right]
					right+=1
				left+=1
			inwards+=1	
		origin_z+=1	
global Array1
global global_max_#  Stores global maximum out of all arrays supplied to kadane's algorithm
global_max = -10000 # make it as less as possible
Array1=[]
def kadane(kadane_array,size,left,right,origin_z,inwards):
	global global_max
	global Array1
	max_till_now = -10000 # make it as small as possible.
	cur_sum = 0
	y1_index=[]  #used to track the lower limit of y_dimension, where y1 is lower and y2 is upper limit i.e. 0<=y1<=y2<=y_dimension
	for i in range(0, size):
		curr_sum = curr_sum + kadane_array[i] 
		if (max_till_now < curr_sum):
			max_till_now = curr_sum
			y2=i     
		if (curr_sum < 0):
			curr_sum = 0  
            y1_index.append(i+1)#y1_index stores all those indices where curr_sum is equal to zero as lower limit can only be from where sum was taken into consideration
		if(len(y1_index)==0):
            y1=0                
		else:	
			count=0
			for i in range(0,len(y1_index)):            
				if(y1_index[i]>y2 and i!=0):
					y1=y1_index[i-1]# the first index for which y1_index becomes greater than y2, y1's value will be equal to y1_index[i-1] 
					count+=1
					break
				if(y1_index[i]>y2 and i==0):
					y1=0
					count+=1
					break
			if(count==0):
				y1=y1_index[len(y1_index)-1]+1
	if(max_till_now>max_so_fa):
		global_max=max_till_now
		Array1=[global_max,origin_z,inwards,y1,y2,left,right]
	return Array1
Traversal([[[4,8,9],[4,-5,-10],[3,19,-99]],[[4,-11,14],[23,-32,-43],[1,0,-1]],[[-4,-2,23],[-22,56,1],[3,-2,-3]]],0,0,3,3,3)
#outermost bracket is dimension_z, innermost is dimension_x and middle one is dimension_y.


print("Max_sum:", Array1[0])
print("In the 3-d indexing system of Array[Outermost_dimension][Middle_dimension][Innermost_dimension] the range of dimensions of elements forming the maximum sum sub_arrays are:")
print("Innermost_dimesion_varies_from: ",str(Array1[5])+"to"+str(Array1[6]))
print("Middle_dimesion_varies_from: ",str(Array1[3])+"to"+str(Array1[4]))
print("Outermost_dimesion_varies_from: ",str(Array1[1])+"to"+str(Array1[2]))
